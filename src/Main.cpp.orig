/*
 * File:   main.cpp
 * Author: bruno
 *
 * Created on December 20, 2013, 9:02 PM
 */

#include "Tests/PlaneTests.h"
#include "Tracking/Tracking.h"
#include "Distortion/TestPlanes.h"

#include "Environment/TestProjection.h"
#include "Calibration/Calib.h"
#include "Tests/AffineTests.h"
#include "Tests/DummyTracker.h"
#include "EventHandler.h"
#include "PeriodicVisualizer.h"
#include "Visualizer.h"
#include <boost/thread.hpp>

void runTests();
<<<<<<< HEAD

int main(int argc, char** argv) {    

    Tracking tracking;
    TestProjection t;

    boost::thread threadTracking(&Tracking::setupTracking, &tracking);
    //boost::thread threadProjection(&TestProjection::test, &t, tracking.getX(), tracking.getY(), tracking.getZ());
    //threadTracking.join();

    //cout << "here" << endl;

    double x = 0.0, lastX = 0.0;
    double y = 0.0, lastY = 0.0;
    double z = 0.0, lastZ = 0.0;

    while(1) {
        int keyPressed = 0;
        if(tracking.getX() == 0.0 && tracking.getY() == 0.0 && tracking.getZ() == 0.0)
            continue;
        //lastX=x;
        //lastY=y;
        //lastZ=z;
        x=tracking.getX();
        y=tracking.getY();
        z=tracking.getZ();
        //if(x<lastX+1000 && x> lastX-1000 && y<lastY+1000 && y> lastY-1000 && z<lastZ+1000 && z> lastZ-1000)
            keyPressed = t.test(x,y,z,keyPressed);
    }

/*

    Tracking tracking;
    tracking.setupTracking(argc,argv);

    
    //TestProjection t;
    //t.test(294.899,1617.23,-3020.34);

=======
void listen(bool &done){
>>>>>>> dbc162d5727f26c0cbf5e6b1a1f18053fe47c6a8
    
    int keyPressed = 0;
    do{
        std::cout << "Waiting key: " << keyPressed << std::endl;
        keyPressed = cv::waitKey(0);
//        std::cin >> keyPressed;
        std::cout << "KEY: " << keyPressed << std::endl;
    }while(keyPressed != 27);
    done = true;
}
int main(int argc, char** argv) {

    Visualizer *visualizer = new PeriodicVisualizer();    
    visualizer->visualize();    
    delete visualizer;
    
    return 0;
}

void runTests() {
    AffineTests at;
    at.testAffineTransform();
}
